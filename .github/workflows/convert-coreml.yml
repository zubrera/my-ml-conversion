# .github/workflows/convert-coreml.yml

name: Convert MiniLM to CoreML

on:
  workflow_dispatch:
    inputs:
      output_name:
        description: 'Name der .mlmodel-Datei'
        required: true
        default: 'MiniLM_L6_v2.mlmodel'

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install deps
        run: |
          python3 -m pip install --upgrade pip
          pip install \
            torch==1.12.1 \
            coremltools==6.0 \
            sentence-transformers==2.2.2 \
            numpy==1.23.5 \
            scikit-learn==1.1.2

      - name: Convert PyTorch → CoreML
        run: |
          python3 - <<'EOF'
          import torch
          import coremltools as ct
          from sentence_transformers import SentenceTransformer

          # Laden & eval setzen
          st = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")
          encoder = st._first_module().auto_model.eval()

          # Dummy-Input (1×128 IDs)
          dummy = torch.randint(0, encoder.config.vocab_size, (1, 128))

          # Trace, strict=False um dict-Output zu umgehen
          traced = torch.jit.trace(encoder, dummy, strict=False)

          # Konvertierung
          mlmodel = ct.convert(
              traced,
              inputs=[ct.TensorType(name="input_ids", shape=dummy.shape, dtype=int)],
              convert_to="mlprogram",
              minimum_deployment_target=ct.target.iOS15
          )

          # Speichern
          output = "${{ github.event.inputs.output_name }}"
          mlmodel.save(output)
          print(f"✅ Modell gespeichert als {output}")
          EOF

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coreml-model
          path: ${{ github.event.inputs.output_name }}
