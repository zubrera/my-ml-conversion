# .github/workflows/convert-coreml.yml

name: Convert MiniLM to CoreML

on:
  workflow_dispatch:
    inputs:
      model_path:
        description: 'Pfad zur ONNX- oder TorchScript-Datei'
        required: true
        default: 'models/all_minilm_l6_v2.onnx'
      output_name:
        description: 'Name der CoreML-Datei'
        required: true
        default: 'MiniLM_L6_v2.mlmodel'

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install torch==1.12.1 coremltools==6.0 sentence-transformers==2.2.2 \
                      scikit-learn==1.1.2 numpy==1.23.5


      - name: Convert to CoreML
        run: |
          python3 - <<EOF
          import torch, coremltools as ct
          from sentence_transformers import SentenceTransformer

          path = '${{ github.event.inputs.model_path }}'
          if path.endswith('.onnx'):
              mlmodel = ct.converters.onnx.convert(path, source='onnx')
          else:
              model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")
              encoder = model._first_module().auto_model.eval()
              dummy = torch.randint(0, encoder.config.vocab_size, (1,128))
              traced = torch.jit.trace(encoder, dummy, strict=False)
              mlmodel = ct.convert(
                  traced,
                  inputs=[ct.TensorType(name="input_ids", shape=dummy.shape, dtype=int)],
                  convert_to="mlprogram",
                  minimum_deployment_target=ct.target.iOS15
              )
          mlmodel.save('${{ github.event.inputs.output_name }}')
          EOF

      - name: Upload CoreML artifact
        uses: actions/upload-artifact@v4
        with:
          name: coreml-model
          path: ${{ github.event.inputs.output_name }}
